Express is an abstracted wrapper around node.js. It provides functionality to setup server code and routes with a lot less
pain in the ass.

What is a API:

An API(Application programming interface) is a piece of software that can be used by another piece of software in order to
allow applications to talk to each other.

In context of web development the API's that we build are called Web API's but the term Application can have a broader
meaning.

1. Node.js fs or http API (Node API's)
2. Browser's DOM Javascript API.
3. With OOP, when exposing methods to the public, we're creating an API.

The REST architecture:

REST (Representational State Transfer) is an architecture for developing web API's and they should follow 5 important rules.

1. Separate API's into logical resources (eg: /tours, /users)
2. Expose structured, resource-based URLs
3. Use HTTP methods (verbs) GET /tours instead of getTours
4. Send data as JSON (usually). JSON can be further enveloped into some more JSON like this {status : "success", data : {DATA HERE}}
5. Be stateless. State management should be done on the client side and not on the server. Server should not have to remember
    any state.

Status Codes for http methods:

1. 200 : Ok (For get request and patch request)
2. 201 : Created (For post request)
3. 204 : No content (For delete request)

The callback function inside a http method is called a route handler.

Everything is middleware in react. Even the router handler functions. Express apps are developed by keeping the request response
cycle in mind. Request response cycle can be visualised as a pipeline which has an incoming request, then all the middlewares
in the middleware stack are applied to that request and finally the data is sent to the client as a response.


MongoDB

MongoDB is a noSQL database. Each database can contain one or more collections (Like Tables). Each collection can contain
a data structure called a document.

MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need.

    Features of MongoDB

    1. Document Based : Stores data in documents.
    2. Scalable : Very easy top distribute data across multiple machines as your users and amount of data grows.
    3. Flexible : No document data schema required, so each document can have different types of fields.
    4. Performant : Embedded data models, indexing, sharding, flexible documents, native duplication etc.
    5. Free and Open Source

Document Structure:
    BSON : Data format MongoDB uses for Data Storage. Like JSON but typed. So MongoDB documents are typed.

    MongoDB is non relational and can have data embeddings/Data denormalization. This means including related data inside
    a single document. This allows for quicker access and easier data models.

    Reverse is true in relational databases. The information is separated inside a new table and joins are created.

Just like express is a layer of abstraction on node, mongoose is a layer of abstraction upon mongoDB.

MVC (Model View Controller)

Model : Business Logic
Controller : Application Logic
View : Presentation Logic

Application Logic vs Business Logic

Application Logic is the code that is only concerned about the application's implementation, not the underlying business
problem we are trying to solve. (Eg showing and selling tours)

Business logic is the code that actually solves the business problem we are trying to solve. Its directly related to business
rules, how the business works and business needs.

Examples:
1. Creating new tours in the database.
2. Checking if the user's password is correct.
3. Validating user input data.
4. Ensuring only users who bought the tour can review it.


Aggregation Pipeline:

    Aggregation Pipeline is a pipeline which is attached to a Model and does some processing to any document that is being added
    to a collection. Aggregation pipeline is like a regular query but the difference is that we can manipulate the data in 
    multiple steps.

Virtual Properties:

    Virtual properties are fields which are not stored in the database in order to save space but can be derived from other fields.


Fat Models - Thin Controllers philosophy.